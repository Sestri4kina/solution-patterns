/**
Problem Statement

You have to implement the isFormationPossible() function which will determine 
whether a given word can be formed by combining two words from a given dictionary.

Input
A dictionary and a query word.

Output
Returns true if the given word can be generated by combining two words from the dictionary.

Sample Input:
dict = ["the", "hello", "there", "answer", "any", "by", "world", "their","abc"]
word = "helloworld"

Sample Output: true
*/

// @ts-check

const TrieNode = require('./trie-node.js');
const Trie = require('./trie.js');

/**
 * @param {Array<string>} dict 
 * @param {string} word 
 * @returns {boolean}
 */
function isFormationPossible(dict, word){
    const trie = new Trie();
    dict.forEach(word => {
        trie.insert(word);
    });
    let index = trie.getIndex(word[0]);
    return isFormationPossibleHelper(trie, trie.root.children[index], word, 0);
}

/**
 * @param {Trie} trie
 * @param {TrieNode} curNode 
 * @param {string} word 
 * @param {number} curIndex 
 * @returns {boolean}
 */
function isFormationPossibleHelper(trie, curNode, word, curIndex) {
    if (curNode === null) {
        return false;
    }

    if (curNode.isEndWord && curIndex >= word.length - 1) {
        return true;
    }

    let char = word[curIndex+1];
    let index = trie.getIndex(char);
    
    if (curNode.isEndWord && curNode.children[index] === null) {
        return isFormationPossibleHelper(trie, trie.root.children[index], word, curIndex + 1);
    }

    return isFormationPossibleHelper(trie, curNode.children[index], word, curIndex + 1);
}

const dict = ["the", "hello", "there", "answer", "any", "by", "world", "their","abc"];
console.log(isFormationPossible(dict, "helloworld") === true);
console.log(isFormationPossible(dict, "thereby") === true);
console.log(isFormationPossible(dict, "helloword") === false);
console.log(isFormationPossible(dict, "therebyany") === true);
